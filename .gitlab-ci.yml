stages:
  - uibuild
  - build
  - docker
  - deploy

ui build:
  stage: uibuild
  image: yarnpkg/node-yarn:latest
  script:
    - yarn build
  artifacts:
    paths:
      - poker-ui-app/build/*

gradle build:
  stage: build
  image: gradle:latest
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"
  script:
    - mv poker-ui-app/build main/src/main/resources/public
    - gradle --build-cache --scan assemble check coverage detekt
    - 'cat ''build/reports/jacoco/coverage/html/index.html'' | sed -n ''s/.*Total[^%]*>\([0-9]*%\).*/Coverage: \1/pg'''
  coverage: /Coverage[^0-9]*([0-9]{1,3})%/
  artifacts:
    paths:
      - main/build/libs/*.jar
  cache:
    key: "gonzalez"
    paths:
      - build
      - .gradle

docker build:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  only:
    - master
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE

deploy:
  stage: deploy
  image: gcr.io/triggermesh/tm:v0.0.8
  only:
    - master
  environment: 
    name: production
    url: https://poker.otd.rotate-it.be
  script:
    - apt-get update && apt-get install --no-install-recommends --yes curl
    - curl -L https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o /usr/bin/kubectl
    - chmod a+x /usr/bin/kubectl
    - kubectl get nodes
    - kubectl get sa default
    - tm -n "$KUBE_NAMESPACE" set registry-auth gitlab-registry --registry "$CI_REGISTRY" --username "$DEPLOY_USER" --password "$DEPLOY_KEY"
    - sed -i "s|commithash|$CI_COMMIT_SHA|" main/src/main/resources/k8s/poker.yaml
    - kubectl --namespace="$KUBE_NAMESPACE" apply -f main/src/main/resources/k8s/poker.yaml
#    - tm -n "$KUBE_NAMESPACE" --registry-host "$CI_REGISTRY_IMAGE" deploy --wait
#    - tm -n "$KUBE_NAMESPACE" --config "$KUBECONFIG" deploy service "$CI_PROJECT_NAME" --from-image "$CI_REGISTRY_IMAGE" --wait
